FaceFrontal
{
	landmark "face"
	type fiveStageCascade ; fiveStageCascade | single. If type is 'fiveStageCascade': provide a 'firstClassifier' and 'secondClassifier'. If type is 'single', provide a 'classifier'.
	firstClassifier pwvm ; pwvm | prvm | psvm (Note: in the future, make distinction in code if probabilistic or not. For now, only support probabilistic.)
	{
		classifierFile C:/Users/Patrik/Documents/GitHub/config/WRVM/fd_web/fnf-hq64-wvm_big-outnew02-hq64SVM/fd_hq64-fnf_wvm_r0.04_c1_o8x8_n14l20t10_hcthr0.72-0.27,0.36-0.14--With-outnew02-HQ64SVM.mat
		thresholdsFile C:/Users/Patrik/Documents/GitHub/config/WRVM/fd_web/fnf-hq64-wvm_big-outnew02-hq64SVM/fd_hq64-fnf_wvm_r0.04_c1_o8x8_n14l20t10_hcthr0.72-0.27,0.36-0.14--ts107742-hq64_thres_0.005--with-outnew02HQ64SVM.mat
		
		; possible optional parameters:
		;numFiltersToUse ; 0 (or absent) means use all ; Note: for wvm & svm. Not implemented yet.
		;threshold -1.2 ; The threshold that gets added to the hyperplane distance before the evaluation. Gets added to every filter.
						; Larger => weniger patches drueber(mehr rejected, langsamer), dh. mehr fn(FRR), weniger fp(FAR)
						; Smaller => mehr patches drueber(mehr nicht rejected, schneller), dh. weniger fn(FRR), mehr fp(FAR)
	}
	secondClassifier psvm
	{
		classifierFile C:/Users/Patrik/Documents/GitHub/config/WRVM/fd_web/fnf-hq64-wvm_big-outnew02-hq64SVM/fd_hq64-fnf_wvm_r0.04_c1_o8x8_n14l20t10_hcthr0.72-0.27,0.36-0.14--With-outnew02-HQ64SVM.mat
		thresholdsFile C:/Users/Patrik/Documents/GitHub/config/WRVM/fd_web/fnf-hq64-wvm_big-outnew02-hq64SVM/fd_hq64-fnf_wvm_r0.04_c1_o8x8_n14l20t10_hcthr0.72-0.27,0.36-0.14--ts107742-hq64_thres_0.005--with-outnew02HQ64SVM.mat
		
		; possible optional parameters:
		; sigmoid parameters: Careful, they are the other way round than in the MR training! (e.g. B = SVM_A, A = SVM_B)
		;logisticA -0.6663 ; for redGrayScaleSVM.txt ; (Todo: Some testing. Only works with non-Matlab classifiers)
		;logisticB -1.8201 ; for redGrayScaleSVM.txt
		threshold -0.5 ; The threshold that gets added to the hyperplane distance before the evaluation.
		
	}
	classifier pwvm
	{
		; Use this if above "type" is set to "single".

	}
	; The feature space of the classifier. Will be applied to the pyramids/patches.
	;feature whi ; gray | hq64 | histeq | whi | hog | lbp | glbp. (Note: Only gray, hq64 and whi can be loaded so far (Todo: Test!))
	;{
		;scale 1 ; for histeq, whi, lbp
	;} ; Todo: Copy the newest from Peter and implement in the code. See Peter's code where I already implemented this? Also in ffpDetApp under 'single'.
	; Additional patch-filters. Sometimes necessary because the classifiers have different feature spaces (e.g. gray: MR: uint 20x20, Cog: float(0-1) 1x961)
	;patchFilter
	;{
		;reshapingFilter 1 ; For the Cog-classifiers
		;conversionFilter "5 0.003921568627451" ; CV_32FC1 = 5, 1.0/255.0 for Cog-gray
	;}
	pyramid
	{
		;minScaleFactor 0.12
		;maxScaleFactor 0.3 ; making this bigger = detect smaller faces
		incrementalScaleFactor 0.9		; (0.09, 0.25, 0.9) are default values that are nearly the same as the old (90, 9, 0.9) setting
		patch
		{
			width 20
			height 20
			minWidth 20 ; either specify those 4 plus incrementalScaleFactor or min/max/inc scale plus width/height. Not implemented yet, code always uses latter one.
			maxWidth 320
		}
	}		
	overlapElimination
	{
		dist 5.0
		ratio 0.0
	}
}